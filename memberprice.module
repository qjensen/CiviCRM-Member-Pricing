<?php

/**
 * Implements hook_help
 * Display help and module information
 *
 * @param string $path url path that will trigger this help display
 * @param array $arg the current path as returned from arg() function
 * @return - help text for the path
 */
function memberprice_help($path, $arg) {
    $output = '';
    switch ($path) {
        case "admin/help#memberpice" :
            $output = '<p>' . t("Adds ability to limit pricing option to members for Events") . '</p>';
            break;
    }
    return $output;
    #TODO create Advanced Help content
}

/**
 * Implements hook_perm
 * @return array list of permissions used by module
 */
function memberprice_perm() {
    return array('modify_memberprice_prices');
}

/**
 * Implements hook civicrm_buildform
 * adds acl list to the price options form
 *
 * @param string $formName  name of form passed by civicrm
 * @param form $form reference to civicrm form object
 */
function memberprice_civicrm_buildForm($formName, &$form) {
    civicrm_initialize();
    
    //only add membership list to price option form
    $action = $form -> getVar('_action');
    if ($formName == 'CRM_Price_Form_Option' && $action == CRM_Core_Action::UPDATE) {
        //generate list of memberships to add to form
        $membership_list = getMemberships();
        //get any acl's that already exist
        $oid = $form -> getElement('optionId') -> getValue();
        //no oid means this price option is being added
        if ($oid) {
            $memberships_selected = getAcl($oid);
        }
        // set default values
        $form -> setDefaults(array('memberships' => $memberships_selected));
        $form -> add('select', 'memberships', 'Memberships', $membership_list);
        $element = $form -> getElement('memberships');
        if (!$oid) {
            $element -> updateAttributes(array('disabled' => true));
        }
        $element -> setMultiple(true);
    }
}

/**
 * Implements postProcess hook
 * handles submission of custom form elements used to build the acl
 * rebuilds the whole acl on submission
 *
 * @param string $formName name of form passed from civicrm
 * @param form object $form reference to civicrm form object
 *
 */
function memberprice_civicrm_postProcess($formName, &$form) {
    $action = $form -> getVar('_action');
    if ($formName == 'CRM_Price_Form_Option' && $action == CRM_Core_Action::UPDATE) {
        $price_option_id = $form -> getElement('optionId') -> getValue();
        $acl_group_id = $form -> getElement('memberships') -> getValue();
        if ($price_option_id) {
            //delete any records with this field id first
            $delsql = "DELETE FROM civicrm_memberprice WHERE oid= %1";
            $delparams = array(1 => array($price_option_id, 'Integer'));
            CRM_Core_DAO::executeQuery($delsql, $delparams);
            //if the acl is not set to Everyone, if it is ignore any other options
            if ($acl_group_id[0] != '00') {
                foreach ($acl_group_id as $acl_param) {
                    //insert new records
                    $sql = "INSERT INTO civicrm_memberprice (mid,oid) VALUES(%1,%2)";
                    $params = array(1 => array($acl_param, 'Integer'), 2 => array($price_option_id, 'Integer'));
                    CRM_Core_DAO::executeQuery($sql, $params);
                }
            }
        }
    }
}

/**
 * Implements buildAmount hook
 * replaces deprecated custom hook
 *
 * Filter display of pricing options available
 * to the currently logged in user based upon
 * group membership
 *
 * @param $pageType string type of page (membership, event, custom, et al)
 * @param $form form reference to the civicrm form object
 * @param $amount array reference to the amount structure used to build form
 *
 */
function memberprice_civicrm_buildAmount($pageType, &$form, &$amount) {
    require_once 'api/v3/Membership.php';
    require_once 'api/v3/GroupContact.php';
    // get the logged in user id
    $session = &CRM_Core_Session::singleton();
    $userID = $session->get('userID');
    $u_memberships = array();
    
    //determine if this is an admin user
    $isAdmin = 0;
    $params = array('contact_id' => $userID);
    $result = civicrm_api( 'GroupContact','get',$params);
    dpm($result['values']);
    if(!$result['is_error']){
        foreach ($result['values'] as $group) {
            if ($group['id'] == 1) {
                $isAdmin = 1;
                echo "You are an admin";
            }
        }
    }
    else {
        //TODO: add error handling code
    }
    
    $params = array(
          'version' => 3,
          'sequential' => 1,
          'contact_id' => $userID
    );
    
    //default values in civicrm database for
    //New, Current, Grace and Pending respectively
    //TODO: make a config form in Drupal so admin can set up
    $validStatusList = array(1,2,3,5);
    
    
    $raw_memberships = civicrm_api('Membership', 'get', $params);
    //dpm($raw_memberships['values']);
    //if user isn't logged in, we don't need to check anything
    //if they don't have any memberhips they pay full boat
    if (!$userID || sizeof($raw_memberships)==0) {
        $userID = -1;
        $u_memberships[] = -1;
    }
    else {
        //if the user is some kind of admin, they see everything
        if ($userID != 1 && $isAdmin != 1) {
            //transform raw array into simple array for our purposes
            //only grab memberships that have a status that would
            //be considered current
            foreach($raw_memberships['values'] as $membership){
                if(in_array($membership['status_id'],$validStatusList)){
                    $u_memberships[] = $membership['id'];
                }
            }
            foreach ($amount as &$priceSetSettings) {
                $optionList = &$priceSetSettings['options'];
                foreach ($optionList as &$priceOption) {
                    $acl = getAcl($priceOption['id']);
                    //assume nothing matches
                    $match = false;
                    foreach ($acl as $ace) {
                        if (!in_array($ace, $u_memberships) && $match == FALSE) {
                            $optionList = array_diff_key($optionList, array($priceOption['id'] => 1));
                        } else {
                            //first matched membership wins
                            //is there a better way? make it configurable?
                            //maybe offer first match, highest price, lowest price
                            $match = true;
                        }
                    }
                }
            }
        }
    }
}

//********************* Utility Functions *************************//

/**
 *
 * Provides list of memberships from CiviCRM to the price options
 * form to be used in select list
 *
 * @return array $grouplist
 */
function getMemberships() {
    $retMemberships = array();
    //default first entry in select list
    $retMemberships['00'] = 'Everyone';
    $retMemberships['-1'] = 'Non Members';
    
    $params = array('version' => 3,
                    'sequential' => 1,);
    $result = civicrm_api( 'membership_type','get',$params );
    foreach ($result['values'] as $membership) {
        $retMemberships[$membership['id']] = $membership['name'];
        
    }
    return $retMemberships;
}

/**
 * Retrieve list of membership types allowed to access
 * the price option field.
 * If empty array is returned then all users have access
 *
 * @return array of access control entries
 */
function getAcl($oid) {
    $aces = array(); //access control entries
    $q = "SELECT mid FROM civicrm_memberprice WHERE oid = %1";
    $params = array(1 => array($oid, 'Integer'));
    $dao = CRM_Core_DAO::executeQuery($q, $params);
    while ($dao->fetch()) {
        array_push($aces, $dao->mid);
    }
    return $aces;
}
?>